{"version":3,"sources":["Todo.js","TodoForm.js","TodoList.js","App.js","serviceWorker.js","index.js"],"names":["Todo","props","state","isEditing","todo","handleRemove","bind","toggleEdit","handleSave","handleChange","handleCompleted","e","this","removeTodo","target","id","markCompleted","setState","preventDefault","updateTodo","name","value","className","type","autoFocus","onChange","onClick","isDone","Component","TodoForm","handleSubmit","addTodo","onSubmit","TodoList","todos","newTodo","uuidv4","st","itemCompleted","newTodoList","map","td","filter","t","updatedTask","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.86538170.chunk.js","sourcesContent":["import React, {Component} from \"react\";\r\n\r\nclass Todo extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = { isEditing: false, todo: this.props.todo }\r\n        this.handleRemove = this.handleRemove.bind(this);\r\n        this.toggleEdit = this.toggleEdit.bind(this);\r\n        this.handleSave = this.handleSave.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleCompleted = this.handleCompleted.bind(this);\r\n    }\r\n\r\n    handleRemove(e){\r\n        this.props.removeTodo(e.target.id);\r\n    }\r\n\r\n    handleCompleted(){\r\n        this.props.markCompleted(this.props.id)\r\n    }\r\n\r\n    toggleEdit(e){\r\n        this.setState({ isEditing: !this.state.isEditing })\r\n    }\r\n\r\n    handleSave(e){\r\n        e.preventDefault();\r\n        this.props.updateTodo(this.props.id, this.state.todo);\r\n        this.toggleEdit();\r\n    }\r\n\r\n    handleChange(e){\r\n        this.setState({\r\n            [e.target.name] : e.target.value\r\n        })\r\n    }\r\n\r\n    render(){\r\n        let result;\r\n        if (this.state.isEditing) {\r\n            result = \r\n            <div>\r\n                <form className=\"TodoForm__form\">\r\n                    <input type='text' name=\"todo\" value={this.state.todo} autoFocus={true} onChange={this.handleChange}/>\r\n                    <button onClick={this.handleSave} id={this.props.id}>SAVE</button>\r\n                    <button onClick={this.handleRemove} id={this.props.id}>X</button>\r\n                </form>\r\n            </div>\r\n        } else {\r\n            result =\r\n            <div className=\"Todo\">\r\n                <div className={`Todo__text ${this.props.isDone && `Todo__text-done`}`} onClick={this.handleCompleted}>{this.props.todo}</div>\r\n                <button onClick={this.toggleEdit} id={this.props.id}>EDIT</button>\r\n                <button onClick={this.handleRemove} id={this.props.id}>X</button>\r\n            </div>\r\n        };\r\n\r\n        return (\r\n           result\r\n        )\r\n    }\r\n}\r\n\r\nexport default Todo;","import React, {Component} from \"react\";\r\n\r\nclass TodoForm extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = { todo: \"\" };\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleChange(e){\r\n        this.setState({\r\n            [e.target.name] : e.target.value\r\n        })\r\n    }\r\n\r\n    handleSubmit(e){\r\n        e.preventDefault();\r\n        this.props.addTodo(this.state);\r\n        this.setState({ todo: \"\" });\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"TodoForm\">\r\n                <form className=\"TodoForm__form\" onSubmit={this.handleSubmit}>\r\n                    <input name=\"todo\" value={this.state.todo} onChange={this.handleChange} autoFocus={true}/>\r\n                    <button>ADD</button>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TodoForm;","import React, {Component} from \"react\";\r\nimport Todo from \"./Todo\";\r\nimport TodoForm from \"./TodoForm\";\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nclass TodoList extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            todos: []\r\n        }\r\n        this.addTodo = this.addTodo.bind(this);\r\n        this.removeTodo = this.removeTodo.bind(this);\r\n        this.updateTodo = this.updateTodo.bind(this);\r\n        this.markCompleted = this.markCompleted.bind(this);\r\n    }\r\n\r\n    addTodo(todo){\r\n        let newTodo = {...todo, isDone: false, id: uuidv4()}\r\n        this.setState(st=>({\r\n            todos: [newTodo, ...st.todos]\r\n        }))\r\n    }\r\n\r\n    markCompleted(itemCompleted){\r\n    let newTodoList = this.state.todos.map(td =>{\r\n            if (td.id === itemCompleted){\r\n                return {...td, isDone: !td.isDone}\r\n            } else {\r\n                return {...td}\r\n            }\r\n        });\r\n        this.setState(st =>({\r\n            todos: [...newTodoList]\r\n        }))\r\n    }\r\n\r\n    removeTodo(id) {\r\n        this.setState(st =>({\r\n            todos: st.todos.filter(t =>(t.id !== id ))\r\n        }))\r\n    }\r\n\r\n    updateTodo(id,updatedTask){\r\n        const newTodoList = this.state.todos.map(td => {\r\n            if(td.id === id){\r\n                return {...td, todo: updatedTask}\r\n            } else {\r\n                return td;\r\n            }\r\n        });\r\n\r\n        this.setState({ todos: newTodoList})\r\n\r\n    }\r\n\r\n    render(){\r\n        let todos = this.state.todos.map(todo =>(\r\n            <Todo todo={todo.todo} isDone={todo.isDone} key={todo.id} id={todo.id} removeTodo={this.removeTodo} markCompleted={this.markCompleted} updateTodo={this.updateTodo} />\r\n        ));\r\n\r\n        return (\r\n            <div className=\"TodoList\">\r\n                <h1>TodoList</h1>\r\n                <TodoForm addTodo={this.addTodo} />\r\n                {this.state.todos[0] ? todos : 'Add your first todo!'}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TodoList;","import React from 'react';\nimport './App.css';\nimport TodoList from './TodoList';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './style/main.scss';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}